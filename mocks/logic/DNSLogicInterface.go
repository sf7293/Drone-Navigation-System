// Code generated by MockGen. DO NOT EDIT.
// Source: logic/DNSLogic.go

// Package mock_logic is a generated GoMock package.
package logic

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	opentracing_go "github.com/opentracing/opentracing-go"
	domain "github.com/sf7293/Drone-Navigation-System/domain"
)

// MockDNSLogicInterface is a mock of DNSLogicInterface interface.
type MockDNSLogicInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDNSLogicInterfaceMockRecorder
}

// MockDNSLogicInterfaceMockRecorder is the mock recorder for MockDNSLogicInterface.
type MockDNSLogicInterfaceMockRecorder struct {
	mock *MockDNSLogicInterface
}

// NewMockDNSLogicInterface creates a new mock instance.
func NewMockDNSLogicInterface(ctrl *gomock.Controller) *MockDNSLogicInterface {
	mock := &MockDNSLogicInterface{ctrl: ctrl}
	mock.recorder = &MockDNSLogicInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNSLogicInterface) EXPECT() *MockDNSLogicInterfaceMockRecorder {
	return m.recorder
}

// CalculateLocation mocks base method.
func (m *MockDNSLogicInterface) CalculateLocation(inputSpan opentracing_go.Span, inputContext context.Context, req domain.LogicRequestCalculateLocation) (domain.LogicResponseCalculateLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateLocation", inputSpan, inputContext, req)
	ret0, _ := ret[0].(domain.LogicResponseCalculateLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateLocation indicates an expected call of CalculateLocation.
func (mr *MockDNSLogicInterfaceMockRecorder) CalculateLocation(inputSpan, inputContext, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateLocation", reflect.TypeOf((*MockDNSLogicInterface)(nil).CalculateLocation), inputSpan, inputContext, req)
}
